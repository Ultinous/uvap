#@IgnoreInspection BashAddShebang

source "$(dirname "$(realpath "$0")")/bash_functions"

current_directory="${current_directory}"
uvap_components_list_path="${current_directory}/uvap_components_list.txt"
script_name="$(basename "${0}")"
script_name_without_extension="${script_name%".sh"}"
service_name="${script_name_without_extension#"run_"}"
service_name="${service_name#"generate_"}"
instance_id=""

get_uvap_components_list() {
	set -o pipefail
	if test "${1:-}" = "AND"; then
		shift
		cat "${uvap_components_list_path}" | grep $(implode '.*' ${*:-}) | cut -f1 -d:
	else
		if test "${1:-}" = "OR"; then
			shift
		fi
		expression="$(implode ' -e ' ${*:-})"
		cat "${uvap_components_list_path}" | grep -F ${expression:-''} | cut -f1 -d:
	fi
	set +o pipefail
}

force_uvap_prefix() {
	perl -e '"$_" =~ /^uvap_.*$/ ? print "$_" : print "uvap_$_" while (<>)'
}

has_uvap_component_attribute() {
	grep "^${1:-'foo'}:" "${uvap_components_list_path}" | grep -Fq "${2:-'bar'}"
}

container_name="$(echo "${service_name}" | force_uvap_prefix)"

get_current_release_git_tag() {
	test_executable git
	git_tag="$(git -C "${current_directory}" tag --list --sort=-creatordate --merged HEAD 'release/*' | head -n1 | cut -f2 -d/)"
	if test -z "${git_tag:-}"; then
		echo "ERROR: finding git release tag on HEAD failed" >&2
		exit 1
	fi
	echo "${git_tag}"
}

get_docker_image_tag_for_component() {
	if test -z "${1:-}"; then
		echo "ERROR: a component name given as an argument is required" >&2
		exit 1
	fi
	if test "true" = "${use_dev_tags:-"false"}"; then
		:
	else
		git_tag="$(get_current_release_git_tag)"; test ${?} -ne 0 && exit 1
		echo "ultinous/uvap:${1}_${git_tag}"
	fi
}

docker_container_run() {
	script_name="$(basename "${0}")"
	script_name_without_extension="${script_name%".sh"}"
	service_name="${script_name_without_extension#"run_"}"
	service_name="${service_name#"generate_"}"
	container_name="$(echo "${service_name}" | force_uvap_prefix)"
	test_executable "docker"
	user_spec="$(id -u):$(id -g)"
	if test "${image_name:-}" = "_auto_detected_"; then
		image_name="$(get_docker_image_tag_for_component "${service_name}")"
	fi

	container_dynamic_options=()
	test ! -z "${models_dir:-}" && container_dynamic_options+=("--mount" "type=bind,readonly,source=${models_dir},destination=/ultinous_app/models/")
	if test ! -z "${config_dir:-}"; then
		properties_file_name=$(test -z "${instance_id}" && echo "${container_name}.properties" || echo "${container_name}_${instance_id}.properties")
		properties_file_path="${config_dir}/${properties_file_name}"
		container_config_dir="/ultinous_app/config/${container_name}"
		container_properties_file_path="${container_config_dir}/${properties_file_name}"
		test -e "${properties_file_path}" || echo "${error?"ERROR: properties file ${properties_file_path} does not exist"}"
		test -r "${properties_file_path}" || echo "${error?"ERROR: properties file ${properties_file_path} is not readable"}"
		test -f "${properties_file_path}" || echo "${error?"ERROR: properties file ${properties_file_path} is not a regular file"}"
		container_dynamic_options+=(\
			"--mount" "type=bind,readonly,source=${config_dir},destination=${container_config_dir}" \
			"--env" "${service_name^^}_PROPERTY_FILE_PATHS=${container_properties_file_path}" \
			"--env" "${service_name^^}_MS_PROPERTY_FILE_PATHS=${container_properties_file_path}" \
			"--env" "${service_name^^}_FILE_PATHS=${container_properties_file_path}" \
		)
		for port in $(grep -Fi ".port=" "${properties_file_path}" | cut -f2 -d'=' | tr -d "'" | tr -d '"'); do
			container_dynamic_options+=("--publish" "${port}:${port}")
		done
	fi

	test ! -z "${license_data_file:-}" && container_dynamic_options+=("--mount" "type=bind,readonly,source=${license_data_file},destination=/ultinous_app/license_data.txt")
	test ! -z "${license_key_file:-}" && container_dynamic_options+=("--mount" "type=bind,readonly,source=${license_key_file},destination=/ultinous_app/licence.key")

	if has_uvap_component_attribute "${service_name}" 'nvidia'; then
		if test "${gpu_specification:-}" = "_auto_detected_"; then
			gpu_id_in_license=$(sed -nE 's/^gpu.*([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})$/\1/ip' "${license_data_file:-}")
			if test -z "${gpu_id_in_license}"; then
				gpu_specification="0"
			else
				gpu_specification="GPU-${gpu_id_in_license}"
			fi
		fi
		container_dynamic_options+=("--runtime" "nvidia" "--env" "NVIDIA_VISIBLE_DEVICES=${gpu_specification}")
	fi

	if has_uvap_component_attribute "${service_name}" 'video'; then
		video_devices="$(v4l2-ctl --list-devices 2>/dev/null | sed -nE 's+^[[:space:]]*(/.*)$+\1+p')"
		for video_device in ${video_devices}; do
			container_dynamic_options+=("--device" "${video_device}:${video_device}:rw")
		done
		container_dynamic_options+=("--group-add" "video")
	fi

	container_name_with_id="$(implode '-' "${container_name}" "${instance_id}")"

	test "$(docker container ls --filter name="^${container_name_with_id}\$" --all --quiet | wc -l)" -eq 1 \
		&& docker container stop "${container_name_with_id}" > /dev/null \
		&& docker container rm "${container_name_with_id}" > /dev/null
	docker pull "${image_name}"
	docker container create \
		--name "${container_name_with_id}" \
		--user "${user_spec}" \
		"${container_dynamic_options[@]}" \
		"${not_our_args[@]/#/}" \
		"${image_name}" \
		"${@}"

	docker container start $(test "${run_mode:-}" = "foreground" && echo "--attach") "${container_name_with_id}"
}
